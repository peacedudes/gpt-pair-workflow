#!/usr/bin/env bash
# Share repo files to clipboard as fenced blocks with metadata.
# Usage: scripts/sharefiles
# Requires: toClip on PATH (clipboard writer)
#
# Guardrails:
# - Skips binary files (heuristic via git grep -I).
# - Skips files larger than SHAREFILES_MAX_KB (default 256 KB). Override:
#     SHAREFILES_MAX_KB=1024 scripts/sharefiles

set -euo pipefail
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

MAX_KB=${SHAREFILES_MAX_KB:-256}
MAX_BYTES=$(( MAX_KB * 1024 ))

# Build eligible file list: tracked, text-like, size <= limit
eligible_files=()
while IFS= read -r -d '' f; do
  [[ -e "$f" ]] || continue
  sz=$(wc -c < "$f" 2>/dev/null || echo 0)
  case "$sz" in (*[!0-9]*|"") sz=0 ;; esac
  (( sz <= MAX_BYTES )) || continue
  # Consider text if empty or git grep -I reports it as non-binary
  if [[ ! -s "$f" ]] || git grep -I -l -e . -- "$f" >/dev/null 2>&1; then
    eligible_files+=("$f")
  fi
done < <(git ls-files -z)

{
  # Repo metadata to help the assistant orient diffs/patches.
  echo "=== Repo meta ==="
  git rev-parse --show-toplevel 2>/dev/null || true
  echo "HEAD: $(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
  echo "DESC: $(git describe --tags --always 2>/dev/null || echo 'n/a')"
  echo "Status:"
  git status --porcelain=v1 2>/dev/null || true
  echo "Files (text, <= ${MAX_KB}KB):"
  printf "%s\n" "${eligible_files[@]}"
  echo "================="

  # Emit eligible files with fenced code blocks.
  for f in "${eligible_files[@]}"; do
    echo "$f"
    echo '```'
    cat "$f"
    echo '```'
  done
} | toClip

echo "Files copied to clipboard (text only, <= ${MAX_KB}KB)"
