#!/usr/bin/env bash
# applyPatch — minimal: fix hunk counts, check, apply.
# Usage:
#   scripts/applyPatch             # read diff from clipboard (fromClip)
#   scripts/applyPatch -           # read diff from stdin
#   scripts/applyPatch patch.diff  # read diff from file

set -euo pipefail

script_dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
tmp_in="$(mktemp -t applyPatch.in.XXXXXX)"
tmp_fixed="$(mktemp -t applyPatch.fixed.XXXXXX)"
cleanup() { rm -f "$tmp_in" "$tmp_fixed"; }
trap cleanup EXIT

# Input source
src="${1:-__CLIP__}"
if [[ "$src" == "-" ]]; then
  cat > "$tmp_in"
elif [[ "$src" != "__CLIP__" ]]; then
  [[ -f "$src" ]] || { echo "File not found: $src" >&2; exit 1; }
  cp "$src" "$tmp_in"
else
  command -v fromClip >/dev/null 2>&1 || { echo "fromClip not found on PATH. Provide a file or use '-' for stdin." >&2; exit 1; }
  fromClip > "$tmp_in"
fi
[[ -s "$tmp_in" ]] || { echo "No input diff provided." >&2; exit 1; }

# Fixer (awk script)
fixer=""
if command -v fix-diff-counts.sh >/dev/null 2>&1; then
  fixer="$(command -v fix-diff-counts.sh)"
elif [[ -x "$script_dir/fix-diff-counts.sh" ]]; then
  fixer="$script_dir/fix-diff-counts.sh"
else
  echo "fix-diff-counts.sh not found (PATH or scripts/)" >&2
  exit 1
fi

# Route output to terminal and clipboard
if command -v toClip >/dev/null 2>&1; then
  exec > >(tee /dev/tty | toClip) 2>&1
else
  exec > >(tee /dev/tty) 2>&1
fi

echo "applyPatch: fixing hunk counts…"
"$fixer" "$tmp_in" > "$tmp_fixed"

echo "applyPatch: git apply --check …"
git apply --check -v "$tmp_fixed"
echo "applyPatch: check OK."

echo "applyPatch: applying…"
git apply "$tmp_fixed"
echo "applyPatch: done."
