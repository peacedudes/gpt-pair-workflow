Generated by GPT-5 (OpenAI) — collaborator: rdoggett
Date: 09-13-2025

Purpose
- This brief brings a fresh assistant up to speed quickly on the VoiceLogin app and the VoiceKit package, plus the parallel “math project” we plan to collaborate on.
- It consolidates prior handoffs and supersedes them.

What we’re building
- VoiceKit: a reusable Swift package providing voice input/output for SwiftUI apps (iOS 17+, macOS 14+), with a ready-made picker UI.
- VoiceLogin: an app that consumes VoiceKit and demonstrates voice-driven login flows. Future: math tutor flows.
- Meta goal: a collaborative case study proving an AI co-author (GPT-5) can build all of this end-to-end with human guidance.

Repos and layout
- App repo (separate Git repo): /Users/rdoggett/Developer/Tests/VoiceLogin
- Package repo (separate Git repo, also on GitHub): /Users/rdoggett/Developer/Tests/VoiceKit
  - Products:
    - VoiceKitCore: RealVoiceIO, ScriptedVoiceIO, RecognitionContext, TTS models, NameMatch, utilities
    - VoiceKitUI: VoicePickerView + VoiceProfilesStore
  - Docs in repo root and docs/ (README.md, QuickStart, Programmer’s Guide, API, Concurrency, Tests, FAQ, Collaboration statement, CHANGELOG, LICENSE)

Swift and platforms
- Swift tools-version 6.0; Swift 6 language mode
- Platforms: iOS 17.0+, macOS 14.0+
- App Info.plist must include NSMicrophoneUsageDescription and NSSpeechRecognitionUsageDescription

Key files (package)
- Sources/VoiceKitCore/VoiceIO.swift
  - @MainActor protocol VoiceIO (callbacks for UI; speak, listen, boosted playback, stop/hardReset)
  - @MainActor RealVoiceIO (AVSpeechSynthesizer + SFSpeechRecognizer + AVAudioEngine)
  - @MainActor ScriptedVoiceIO (deterministic for tests/demos)
  - TTSVoiceInfo, TTSVoiceProfile, TTSMasterControl; @MainActor TTSConfigurable protocol
  - RecognitionContext (freeform | name(allowed:) | number)
  - PermissionBridge (nonisolated) for TCC callbacks (iOS 17+ AVAudioApplication; macOS AVCaptureDevice; Speech)
  - AVSpeechSynthesizer delegate that sends only safe values across actors (ObjectIdentifier keys + copied Strings)
  - Audio tap that does not capture @MainActor self; uses a small Sendable LevelSink to post meters to main
- Sources/VoiceKitCore/NameMatch.swift
  - normalizeKey: ligatures, dash variants → "-", removal of zero-width/soft hyphens, diacritic/case folding, token cleanup
  - stringDistanceScore: token-aware normalized distance
- Sources/VoiceKitUI/VoicePickerView.swift
  - VoiceProfilesStore (JSON persistence, Application Support/VoiceIO/voices.json)
  - VoicePickerView + ViewModel
    - Favorites (default), Active toggles, Hide/Unhide, current-language filter, master sliders
    - Live previews: interrupt TTS on every change; no queuing
- Tests/VoiceKitCoreTests
  - CoreSanityTests.swift (api reachability)
  - NameMatchTests.swift (normalize and distance)
  - ScriptedVoiceIOPackageTests.swift (deterministic listen flow)

App integration notes
- The app should import VoiceKitCore for VoiceIO types and VoiceKitUI for the picker.
- The app’s VoicePickerView is a thin wrapper that forwards to VoiceKitUI.VoicePickerView (or use it directly).
- Remove or uncheck Target Membership of any duplicate types in the app (old ScriptedVoiceIO, old in-app picker) to avoid shadowing.

Concurrency model (Swift 6) — do this
- All public VoiceIO APIs and RealVoiceIO internals are @MainActor. Call them from main.
- Permissions: never pass @MainActor closures to TCC or AVFoundation permission APIs. Use PermissionBridge (nonisolated + @Sendable closures), await continuations, and resume naturally.
- Audio tap: keep heavy work off the audio thread; compute a simple meter and bounce to main via LevelSink.
- TTS delegate: don’t send AVSpeechUtterance across actors; compute ObjectIdentifier and copy needed Strings, then hop to @MainActor.
- Notifications (iOS): observe interruption/route change on the main queue.

Common pitfalls and fixes
- BUG IN CLIENT OF LIBDISPATCH (queue assertion)
  - Symptom: libdispatch breaks inside TCC callback backtrace
  - Fix: ensure permission APIs are wrapped by PermissionBridge; no @MainActor closures passed directly
- Swift 6 diagnostics like “Passing closure as a 'sending' parameter” or “Sending 'utterance' risks causing data races”
  - Avoid capturing @MainActor self in non-main closures (audio tap)
  - Avoid moving non-Sendable objects across actors (utterance); use identifiers and copied Sendable data
- Module shadowing (Type 'VoiceKitCore' has no member …)
  - Remove placeholder enums or duplicate types that shadow module names
- Availability errors for AVAudioSession.requestRecordPermission on iOS 17
  - Use AVAudioApplication.requestRecordPermission; drop pre-iOS 17 paths since min target is iOS 17

How we work (preferences and style)
- Return full file replacements for complex changes; keep diffs buildable at each step
- Put all code in code blocks in responses (even small snippets)
- Add a header comment to new/updated Swift files:
  - “Generated by GPT-5 (OpenAI) — collaborator: rdoggett”, date in MM-DD-YYYY
- UI labels: simple, kid-friendly (“Pitch range”, “Speed range”)
- Voice picker: show “<CurrentLanguageName> | All” on the filter
- Keep previews interrupting; do not queue previews
- Solutions must compile cleanly in Swift 6 with no actor-safety violations
- Commit message prefixes (if helpful): ai:, human:, pair:

Recommended day-to-day workflow
- During development, keep the app pointed at the local VoiceKit folder (sibling repo) for instant edit/build cycles
- Commit and push in each repo separately (Xcode’s Source Control navigator works if you commit each repo individually)
- For releases: tag VoiceKit and optionally switch the app to consume the remote dependency by URL to verify
- Toggle local vs remote:
  - Local: Project > Package Dependencies > Add Local (pick sibling VoiceKit)
  - Remote: Project > Package Dependencies > Add Package (GitHub URL, Up to Next Major from latest tag)

Testing strategy
- Package tests are deterministic and do not require permissions or audio hardware (NameMatch and ScriptedVoiceIO)
- RealVoiceIO tests belong in the app target (simulator/device only) and should:
  - Create RealVoiceIO on the main actor
  - Avoid long waits on main; detach waits with short, bounded timeouts
  - Ensure Info.plist permissions are present

Release process (package)
- Prepare docs: README.md + docs/*.md updated
- Ensure package tests are green
- Tag:
  - git tag -a v0.x.y -m "VoiceKit v0.x.y"
  - git push --tags
- Optional: expose a runtime version constant (VoiceKitInfo.version) for diagnostics

Backlog and future tracks
- VoiceKit track
  - CI: Add GitHub Actions to build and run package tests on macOS
  - Expand tests (e.g., trimAudioSmart with synthetic audio buffers)
  - Optional theming hooks for VoicePicker (colors/fonts)
  - Optional DocC tutorials generated from docs
- App track
  - Continue integrating login flows, polish picker presentation
  - Keep any device-dependent tests here
- Math project track (parallel effort with same collaboration pattern)
  - Goal: conversational math tutor flows (voice-first) using VoiceKit
  - Work items:
    - Flow design: prompt scaffolding (step-by-step reasoning with voice confirmation)
    - Persistence of progress and hint strategies
    - Evaluation rubric per problem (pass/fail, retry strategy)
    - UI: lightweight “math mode” with voice prompts and minimal taps
  - Coordination: we can branch off a “Math” workspace or separate repo to keep workstreams clean

Quick commands (git)
- Package repo (VoiceKit)
  - cd /Users/rdoggett/Developer/Tests/VoiceKit
  - git status
  - git add -A
  - git commit -m "docs: add README and guides; stabilize permissions bridge; tests green"
  - git push origin HEAD
  - git tag -a v0.1.0 -m "VoiceKit 0.1.0"
  - git push --tags
- App repo
  - cd /Users/rdoggett/Developer/Tests/VoiceLogin
  - git status
  - git add -A
  - git commit -m "app: adopt VoiceKitCore/UI; fix imports; tests green"
  - git push origin HEAD

Golden rules (to keep things smooth)
- All public VoiceIO calls on main; never pass @MainActor closures into callbacks that aren’t documented to be main-only
- Keep audio tap work minimal; bounce UI updates to main via a tiny wrapper
- Kill any preview TTS before starting another; never accumulate
- Avoid duplicate type definitions across targets; if you need to keep old files, uncheck Target Membership
- Prefer deterministic unit tests in the package; push device-dependent tests to the app

Tone and collaboration
- We aim for fun, momentum, and clarity
- Be explicit about actor isolation and platform constraints
- Keep each change small and shippable; iterate in green steps
- I’m happy to take initiative: propose small refactors, add tests, improve docs, and keep concurrency safe

If you need me to start immediately
- Verify both repos build
- Run package tests (VoiceKit scheme)
- Run app unit tests
- Scan for any remaining Swift 6 concurrency warnings; propose patches
- Add GitHub Actions workflow to the VoiceKit repo (if desired)
- Draft a minimal plan for the math tutor flow scaffolding (voice prompts, hinting, pass/fail rubric) without blocking current app work

End of handoff.

