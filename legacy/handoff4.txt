3) Updated handoff brief for your next assistant

Project: VoiceKit (Swift Package)
- Targets: VoiceKitCore (engine, tests), VoiceKitUI (picker UI, tests)
- Platforms: iOS 17+, macOS 14+, Swift tools 6.0 (language mode v6)
- Public API is @MainActor; callbacks to UI are on main

Core components
- RealVoiceIO (@MainActor)
  - TTS: AVSpeechSynthesizer with a safe delegate bridge (no cross-actor AVSpeechUtterance)
  - STT: SFSpeechRecognizer + AVAudioEngine; audio tap computes levels on real-time thread; posts UI updates via a Sendable sink
  - Boosted playback: AVAudioEngine + AVAudioPlayerNode + EQ; no polling; completion resumes awaiters on main (no QoS inversions)
  - Permissions: nonisolated async bridges for mic/speech to avoid passing @MainActor closures into TCC/AVF (prevents libdispatch queue assertions)
  - Timers: overall timeout and inactivity timeout implemented as Tasks; finishRecognition is idempotent
  - Trimming: post-recording smart trim using energy threshold when STT timestamps are unreliable
- ScriptedVoiceIO (@MainActor)
  - Deterministic test/demos; queue of transcripts
  - Added convenience init(script: [String]) to avoid Base64 when desired
- Utilities
  - NameMatch: normalizeKey (ligatures, diacritics, apostrophes, dash variants, invisibles); stringDistanceScore (token-aware Levenshtein)
  - NameResolver: strict matching with normalization
  - RecognitionContext: .freeform | .name(allowed) | .number with contextualStrings
  - VoiceOpGate: lightweight async gate to serialize high-level operations

UI components
- VoicePickerView (SwiftUI)
  - Lists system voices, favorites, active/hidden toggles, live preview
  - Master controls (volume, pitch range, speed range) with debounced preview
- VoiceProfilesStore
  - JSON persistence of profiles, active set, default voice, master controls
  - Pure Swift, file-based; used by ViewModel and view

Concurrency and safety
- All public API methods are @MainActor; RealVoiceIO internal background callbacks hop back via Task { @MainActor in … }.
- Audio tap: no capture of main-actor self; posts levels using a tiny @unchecked Sendable sink to main.
- Permissions: nonisolated async wrappers (awaitMicPermission, awaitSpeechAuth) avoid passing @MainActor closures into TCC or AVF, fixing “BUG IN CLIENT OF LIBDISPATCH” crashes.
- Boosted playback: completion is driven by AVAudioPlayerNode callbacks or a timeout; awaiting startPreparedBoosted resumes on main, removing priority inversions.

Testing
- Package tests: deterministic, no hardware needed
  - Core: NameMatch, NameResolver, RecognitionContext, VoiceOpGate, ScriptedVoiceIO flows
  - UI: VoiceProfilesStore persistence/toggles; VoicePickerViewModel bootstrapping, filtering, preview, debounced updates
- App tests (VoiceLogin): RealVoiceIO integration on simulator/device only
  - Avoid awaiting speak() on main if you can; run speak in a Task and await boosted completion on a background task to avoid QoS warnings

Workflow
- Two windows: VoiceKit Package.swift in one (run package tests), VoiceLogin app in the other (app tests and app dev).
- Or keep Xcode on VoiceLogin and run package tests from Terminal: swift build && swift test
- CI: macOS runner; swift build and swift test (we provided a workflow earlier)

Known issues and next steps
- VoiceIO.swift is large; suggested refactor into:
  - VoicePublic.swift (protocols/models)
  - RealVoiceIO+TTS.swift
  - RealVoiceIO+STT.swift
  - RealVoiceIO+Boosted.swift
  - ScriptedVoiceIO.swift
  - PermissionBridge.swift
  No behavior changes; improves readability and testability.
- ScriptedVoiceIO Base64 constructor is convenient for single-string payloads but less human-friendly. We added init(script: [String]); consider deprecating Base64 init later.
- More coverage: can push UI tests further (row interactions through the view layer) if we extract some view logic or test with ViewInspector (out of scope for this PR).
- If any libdispatch assertions reappear in app integration tests: verify the app calls ensurePermissions() and configureSessionIfNeeded() from a @MainActor context. With the new PermissionBridge awaiters, this should be resolved.

(later)...
Mini handoff brief for the next assistant
- Package: VoiceKit (VoiceKitCore, VoiceKitUI). iOS 17+/macOS 14+, Swift 6 mode, @MainActor API.
- Core: RealVoiceIO handles TTS (AVSpeechSynthesizer), STT (SFSpeechRecognizer + AVAudioEngine), SFX “boosted” playback (AVAudioPlayerNode). No polling; completion resumes on main via continuations; avoids QoS inversion warnings.
- Permissions: nonisolated async bridges (awaitMicPermission, awaitSpeechAuth) to avoid libdispatch queue assertions.
- ScriptedVoiceIO: deterministic test/demos. Now has init(script:) so you can avoid Base64.
- UI: VoicePicker (SwiftUI), VoicePickerViewModel, VoiceProfilesStore (JSON persistence). Debounced preview, active/hidden, language filter.
- Concurrency: audio tap posts levels via a small Sendable sink; no @MainActor captures in realtime closures. Operation gate serializes high-level ops.
- Tests: Core covers NameMatch/Resolver, ScriptedVoiceIO flows, gate. UI covers ViewModel bootstrapping/filtering/preview and store persistence. App tests (VoiceLogin) should run speak in a Task and await boosted on a background task to avoid QoS warnings.
- Workflow: Keep Xcode on VoiceLogin; run package tests via Terminal. For coverage: scripts/coverage-xcode.sh.


